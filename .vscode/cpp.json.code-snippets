{
	// Place your private_atcoder ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"AtCoder_template": {
		"prefix": "template",
		"body": [
			"#include <bits/stdc++.h>",
			"#define REP(var, n) for (decltype(n) var = 0; var < (n); var++)",
			"#define REP_R(var, n) \\",
			"\tfor (auto var = (n)-1; var != static_cast<decltype(var)>(-1); var--)",
			"#define FOR(var, a, b) for (auto var = (a); var < (b); var++)",
			"#define FOR_R(var, a, b) for (auto var = (b - 1); var > (a - 1); var--)",
			"#define ALL(c) std::begin(c), std::end(c)",
			"",
			"using namespace std;",
			"using ll = long long;",
			"",
			"// REP(idx, 3) { cout << idx; }  // 012",
			"// REP_R(idx, 3) { cout << idx; }  // 210",
			"// FOR(idx, 4, 7) { cout << idx; }  // 456",
			"// FOR_R(idx, 4, 7) { cout << idx; }  // 654",
			"// sort(ALL(v));",
			"",
			"ll mod = 1000000007;",
			"ll N, i;",
			"",
			"int main() {",
			"\tstd::cin.tie(nullptr);",
			"\tstd::ios::sync_with_stdio(false);",
			"",
			"\tcin >> N;",
			"\tcout << N << endl;",
			"}",
		],
		"description": "AtCoderのひな形"
	},
	"AtCoder_template_2": {
		"prefix": "template_vector_ll",
		"body": [
			"#include <bits/stdc++.h>",
			"#define REP(var, n) for (decltype(n) var = 0; var < (n); var++)",
			"#define REP_R(var, n) \\",
			"\tfor (auto var = (n)-1; var != static_cast<decltype(var)>(-1); var--)",
			"#define FOR(var, a, b) for (auto var = (a); var < (b); var++)",
			"#define FOR_R(var, a, b) for (auto var = (b - 1); var > (a - 1); var--)",
			"#define ALL(c) std::begin(c), std::end(c)",
			"",
			"using namespace std;",
			"using ll = long long;",
			"",
			"// REP(idx, 3) { cout << idx; }  // 012",
			"// REP_R(idx, 3) { cout << idx; }  // 210",
			"// FOR(idx, 4, 7) { cout << idx; }  // 456",
			"// FOR_R(idx, 4, 7) { cout << idx; }  // 654",
			"// sort(ALL(v));",
			"",
			"ll mod = 1000000007;",
			"ll N, i, j, k, l;",
			"vector<ll> A, B;",
			"",
			"int main() {",
			"\tstd::cin.tie(nullptr);",
			"\tstd::ios::sync_with_stdio(false);",
			"",
			"\tcin >> N;",
			"\tREP(i, N) {",
			"\t\tcin >> j >> k;",
			"\t\tA.push_back(j);",
			"\t\tB.push_back(k);",
			"\t}",
			"}",
		],
		"description": "AtCoderのひな形"
	},
	"simple_template": {
		"prefix": "simple_template",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"using ll = long long;",
			"",
			"int main() {",
			"\t",
			"}",
		],
		"description": "AtCoderのひな形"
	},
	"input_vector": {
		"prefix": "input_vi",
		"body": [
			"int n;",
			"cin >> n;",
			"vector<int> v(n, -1);",
			"for (auto &&i : v) {",
			"\tcin >> i;",
			"}",
		],
		"description": "read vector<int>"
	},
	"print_vector": {
		"prefix": "print_v",
		"body": [
			"template <typename T>",
			"void print_v(const vector<T> vec) {",
			"\tcout << \"size: \" << vec.size() << endl;",
			"\tcout << \"[\";",
			"\tfor (auto &&item : vec) {",
			"\t\tcout << item << \",\";",
			"\t}",
			"\tcout << \"]\" << endl;",
			"}",
		],
		"description": "print vector"
	},
	"print_2d_vector": {
		"prefix": "print_vv",
		"body": [
			"template <typename T>",
			"void print_v(const vector<T> vec) {",
			"\tcout << \"[\";",
			"\tfor (auto &&item : vec) {",
			"\t\tcout << item << \",\";",
			"\t}",
			"\tcout << \"]\" << endl;",
			"}",
			"",
			"template <typename T>",
			"void print_vv(const vector<T> vec) {",
			"\tfor (auto &&item : vec) {",
			"\t\tprint_v(item);",
			"\t}",
			"}",
		],
		"description": "print vector"
	},
	"int2longlong": {
		"prefix": "ll_int_to_longlong",
		"body": [
			"#define int long long",
			"signed main(){"
		],
		"description": "int を long long にしたいとき"
	},
	"deep_copy": {
		"prefix": "deep_copy",
		"body": [
			"template <typename T>",
			"vector<T> deep_copy_1d(const vector<T> vec) {",
			"\tvector<T> tmp(vec.size());",
			"\tfor (const auto &item : vec) {",
			"\t\ttmp.push_back(item);",
			"\t}",
			"\treturn vec;",
			"}",
			"",
			"template <typename T>",
			"vector<vector<T>> deep_copy_2d(const vector<vector<T>> vec) {",
			"\tvector<vector<T>> tmp(vec.size());",
			"\tfor (const auto &item : vec) {",
			"\t\ttmp.push_back(deep_copy_1d(item));",
			"\t}",
			"\treturn vec;",
			"}"
		],
		"description": "vector の deep copy"
	}
}